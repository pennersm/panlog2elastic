# @Author: mpenners
# @Date:   2022-04-04T15:22:16+02:00
# @Filename: docker-compose.yml
# @Last modified by:   mpenners
# @Last modified time: 2022-05-09T20:43:18+02:00
#
# https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
version: "3.3"
services:
#------------------------------------------------------------------
# one dummycontainer to create a volume with needed certificates
  setupdummy:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - type: volume
        source: elk-pan-certs
        target: ${CERT_ROOT}
      - type: bind
        source: ./elk/setup_certs
        target: ${ES_HOME}/setup_certs
      - type: bind
        source: .env
        target: ${ES_HOME}/setup_certs/.env

    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        echo "calling bind-mounted setup script in docker-compose service command" ;
        chmod 2755 ${ES_HOME}/setup_certs/setup_certs.sh ;
        chmod  755 ${ES_HOME}/setup_certs/.env ;
        ${ES_HOME}/setup_certs/setup_certs.sh ;
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f ${ES_HOME}/config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
#------------------------------------------------------------------
# elasticsearch node es01
# original image unchanged only edit
#ENTRYPOINT ["/bin/tini" "--" "/usr/local/bin/docker-entrypoint.sh"]
  es01:
    depends_on:
      - setupdummy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - type: volume
        source: esdata01
        target: ${ES_HOME}/data
      - type: volume
        source: elk-pan-certs
        target: ${ES_HOME}/config/certs
      - type: bind
        source: ./elk/elasticsearch/es01/config
        target: ${ES_HOME}/config
      - type: bind
        source: ./elk/kibana/pan-elk/snapshots
        target: ${ES_HOME}/snapshots
    user: "${ELKUID}"
    environment:
      - ES_HOME=${ES_HOME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_HEAP=${ES_JAVA_HEAP}
      - bootstrap.memory_lock=true
    ports:
      - ${ES_PORT}:9200
      - ${EST_PORT}:9300
    ulimits:
      memlock:
        soft: -1
        hard: -1
#    command: bash -c "while true; do sleep 300; done"
    command: >
      bash -c '
        while [ ! -f "${ES_HOME}/config/certs/es01/es01.crt" ]; do sleep 5; done;
        /usr/local/bin/docker-entrypoint.sh eswrapper
      '
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert ${ES_HOME}/config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 1s
      timeout: 5s
      retries: 120


#  es02:
#    depends_on:
#      - es01
#    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#    volumes:
#      - type: volume
#        source: esdata02
#        target: ${ES_HOME}/data
#      - type: volume
#        source: elk-pan-certs
#        target: ${ES_HOME}/config/certs
#      - type: bind
#        source: ./elk/elasticsearch/es02/config
#        target: ${ES_HOME}/config
#      - type: bind
#        source: ./elk/elasticsearch/kibana/pan-elk/snapshots
#        target: ${ES_HOME}/snapshots
#    user: "${ELKUID}"
#    environment:
#      - ES_HOME=${ES_HOME}
#
#      - bootstrap.memory_lock=true
#    command: >
#      bash -c '
#        while [ ! -f "${ES_HOME}/config/certs/es02/es02.crt" ]; do sleep 10; done;
#        /usr/local/bin/docker-entrypoint.sh eswrapper
#      '
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#
#    healthcheck:
#      test:
#        [
#          "CMD-SHELL",
#          "curl -s --cacert ${ES_HOME}/config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
#        ]
#      interval: 1s
#      timeout: 5s
#      retries: 120

#curl -v https://localhost:9200 -u elastic

#  es03:
#    depends_on:
#      - es02
#    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#    volumes:
#      - type: volume
#        source: esdata03
#        target: /usr/share/elasticsearch/data
#      - type: volume
#        source: elk-pan-certs
#        target: /usr/share/elasticsearch/config/certs
#      - type: bind
#        source: ./elk/elasticsearch/es03/config
#        target: /usr/share/elasticsearch/config
#      - type: bind
#        source: ./elk/elasticsearch/kibana/pan-elk/snapshots
#        target: ${ES_HOME}/snapshots
#    environment:
#      - ES_HOME=${ES_HOME}
#    command: >
#      bash -c '
#        while [ ! -f "${ES_HOME}/config/certs/es03/es03.crt" ]; do sleep 5; done;
#        /usr/local/bin/docker-entrypoint.sh eswrapper
#      '
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1

  ls01:
    depends_on:
      - kibana01
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    volumes:
      - type: volume
        source: lsdata01
        target: /usr/share/logstash/data
      - type: volume
        source: elk-pan-certs
        target: /usr/share/logstash/config/certs
      - type: bind
        source: ./elk/logstash/ls01/config
        target: /usr/share/logstash/config
    user: "${ELKUID}"
    environment:
      - LS_HOME=${LS_HOME}
      - ES_JAVA_HEAP=${ES_JAVA_HEAP}
      - bootstrap.memory_lock=true
    ports:
      - ${LS_PORT}:5044
      - ${FWLOGRX_PORT}:${FWLOGRX_PORT}/udp
    command: >
      bash -c '
        while [ ! -f "${LS_HOME}/config/certs/ls01/ls01.crt" ]; do sleep 60; done;
        /usr/local/bin/docker-entrypoint
        tail -f /dev/null
      '
#        /usr/local/bin/docker-entrypoint
    ulimits:
      memlock:
        soft: -1
        hard: -1
#
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --insecure -v --cacert ${LS_HOME}/config/certs/ls01/ls01.crt https://es01:9200 -u logstash_pan-fwlog:${LOGSTASH_PASSWORD} 2>&1 |grep Accept",
        ]
      interval: 1s
      timeout: 5s
      retries: 120









#
  kibana01:
    depends_on:
      - es01
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - type: volume
        source: kibanadata01
        target: /usr/share/kibana/data
      - type: volume
        source: elk-pan-certs
        target: ${KIBANA_HOME}/config/certs
      - type: bind
        source: ./elk/kibana/kibana01/config
        target: /usr/share/kibana/config
      - type: bind
        source: ./elk/kibana/pan-elk/dashboards
        target: /usr/share/kibana/dashboards
    ports:
      - ${KIBANA_PORT}:5601
    environment:
#      - SERVERNAME=kibana
      - KIBANA_HOME="/usr/share/kibana"
#      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
#      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=${KIBANA_HOME}/certs/ca/ca.crt
    command: >
      bash -c '
        while [ ! -f "${KIBANA_HOME}/config/certs/kibana01/kibana01.crt" ]; do sleep 15; done;
        /usr/bin/tini -s -- /usr/local/bin/kibana-docker
      '
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120



#    command:
#      [ "/usr/share/elasticsearch/bin/elasticsearch", "-v" ]
#    configs:
#      - jvm.options
#      - elasticsearch.yml
#      - jvj2.properties
#------------------------------------------------------------------
#configs:
#  jvm.options:
#    file: ./elk/elasticsearch/es01/config/jvm.options
#  elasticsearch.yml:
#    file: ./elk/elasticsearch/es01/config/elasticsearch.yml
#  jvj2.properties:
#    file: ./elk/elasticsearch/es01/config/jvj2.properties
volumes:
  elk-pan-certs:
  esdata01:
#  esdata02:
#  esdata03:
  kibanadata01:
  lsdata01:
#------------------------------------------------------------------
#  ls01:
#    image: logstash-8.1.2-panmod-0.2
#    volumes:
#      - kibanaconf:/usr/share/kibana/config
#      - kibanadata:/usr/share/kibana/data
#    ports:
#      - 5044:5044
#      - 9600:9600
#    links:
#      - es01
