####################################################################################################
#
#  send PanOS logs to 3 different indexes threat, traffic, gtp
#  October 28 2021
#
#  open issues:
#            variables in head to be used lower / centralisation and automation of config info
#            mappings might be subject to adjustment look also for better integer handling
#            text cleaning in threat_name
#            ports and stuff to be integer might need mapping check in elastic
#            search for integer in elastic needs check or mapping change
#            packet receiving is really shitty check icmp messages on 5518
#            when traffic comes check the bytes fields for bkMG
#            why does @timestamp not show insertion time to elastic
#
#####################################################################################################
#COMBINDEX => "${IDX:combi-%{+YYYY.MM.DD}}"
#ESHOSTTGT => "${ESH:127.0.0.1:9200}
#CFVERSION => 28102021-3
input {
    udp {
        host => "0.0.0.0"
        port => "5518"
        buffer_size => 2500
        queue_size =>  50000
#        receive_buffer_size =>
    }
}
#--------------------------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------------------------
filter {
    #----------------------------------------------------------------------------------------------
    if ([message] =~ /,TRAFFIC,/) {
        csv {
            source => "message"
            columns => [
                "header","fw_log_time","logtype","serial","device_name","vsys","traffic_proto","traffic_tunnel","traffic_src","traffic_dst","imsi","imei","traffic_app","traffic_sessionid","traffic_sport","traffic_dport","traffic_action","traffic_subtype","traffic_session_end_reason","traffic_pkts","traffic_pkts_received","traffic_pkts_sent","traffic_bytes","traffic_bytes_received","traffic_bytes_sent","traffic_flags","traffic_rule"
             ]
        }
        mutate {
            convert      => [ "traffic_sport", "integer" ]
            convert      => [ "traffic_dport", "integer" ]
            add_tag      => "TRAFFIC"
            add_field    => { "[devkey]" => "%{[serial]}-%{[device_name]}-%{[vsys]}" }
            add_field    => { "[subkey]" => "%{[serial]}-%{[device_name]}-%{[vsys]}-%{[imsi]}" }
            add_field    => { "[seskey]" => "%{[serial]}-%{[device_name]}-%{[vsys]}-%{[imsi]}-%{[traffic_sessionid]}" }
        }

        if ( [traffic_subtype] in [ "start","Start" ] ) {
            mutate { add_field  => { session_stat => "ON"} }
        } else if ( [traffic_subtype] in [ "end", "End", "Drop", "drop", "Deny", "deny" ] ) {
            mutate { add_field  => { session_stat => "OFF" } }
        } else {
            mutate { add_field  => { session_stat => "ORP" } }
        }
#

    }  #  end if message is of type TRAFFIC
    #-----------------------------------------------------------------------------------------------------------
    else if ([message] =~ /,GTP,/) {
        csv {
            source => "message"
            columns => [
              "header","fw_log_time","logtype","serial","device_name","vsys","gtp_proto","gtp_tunnel","gtp_src","gtp_dst","imsi","imei","gtp_app","gtp_sessionid","gtp_sport","gtp_dport","gtp_action","gtp_event_code","gtp_severity","gtp_msisdn","gtp_apn","gtp_rat","gtp_msg_type","gtp_end_ip_addr","gtp_teid1","gtp_teid2","gtp_interface","gtp_cause_code","gtp_mcc","gtp_mnc","gtp_area_code","gtp_cell_id","gtp_event_type","gtp_rule"
            ]
        }

        mutate {
            convert      => [ "gtp_sport", "integer" ]
            convert      => [ "gtp_dport", "integer" ]
            add_tag      => "GTP"
            add_field    => { "[devkey]" => "%{[serial]}-%{[device_name]}-%{[vsys]}" }
            add_field    => { "[subkey]" => "%{[serial]}-%{[device_name]}-%{[vsys]}-%{[imsi]}" }
            add_field    => { "[seskey]" => "%{[serial]}-%{[device_name]}-%{[vsys]}-%{[imsi]}-%{[gtp_sessionid]}" }
            add_field    => { "[gtpkey_ue]" => "%{[imsi]}-%{[gtp_end_ip_addr]}" }
        }

        if ( [gtp_event_code] in [ "881","882" ] ) {
            mutate { add_field  => { session_stat => "ON"} }
        }
        else if ( [gtp_event_code] in [ "841", "842", "844" ] ) {
            mutate { add_field  => { session_stat => "OFF" } }
        }
        else if ( [gtp_event_code] in [ "101000", "101400" ] ) {
            mutate { add_field  => { session_stat => "DRT" } }
        } else {
            mutate { add_field  => { session_stat => "ORP" } }
        }

    }  #  end if message is of type GTP
    #-----------------------------------------------------------------------------------------------------------
    else if ([message] =~ /,THREAT,/) {
        csv {
            source => "message"
            columns => [
            "header","fw_log_time","logtype","serial","device_name","vsys","threat_proto","threat_tunnel","threat_src","threat_dst","imsi","imei","threat_app","threat_sessionid","threat_sport","threat_dport","threat_action","threat_subtype","threat_severity","threat_threatid","threat_category","threat_direction","threat_url_idx","threat_filedigest","threat_filetype","threat_file_url","threat_flags","threat_http_headers","threat_http_method","threat_referer","threat_sig_flags","threat_user_agent","threat_xff","threat_sender","threat_subject","threat_recipient","threat_name","threat_rule"
            ]
        }

        grok {
            match        => { "threat_threatid" => "\(%{NUMBER:threat_threatid}" }
            overwrite    => [ "threat_threatid" ]
        }

        mutate {
            convert      => [ "threat_sport", "integer" ]
            convert      => [ "threat_dport", "integer" ]
            convert      => [ "threat_threatid", "integer" ]
            add_tag      => "THREAT"
            add_field    => { "[devkey]" => "%{[serial]}-%{[device_name]}-%{[vsys]}" }
            add_field    => { "[subkey]" => "%{[serial]}-%{[device_name]}-%{[vsys]}-%{[imsi]}" }
            add_field    => { "[seskey]" => "%{[serial]}-%{[device_name]}-%{[vsys]}-%{[imsi]}-%{[threat_sessionid]}" }
            add_field    => { "[gtpkey_src]" => "%{[imsi]}-%{[threat_src]}" }
            add_field    => { "[gtpkey_dst]" => "%{[imsi]}-%{[threat_dst]}" }
        }

        mutate { add_field  => { session_stat => "DRT" } }


    }  #  end if message is of type THREAT
    #-----------------------------------------------------------------------------------------------------------

   mutate { remove_field => [ "message" , "header" , "host" ] }
#   date {
#             match => [ "fw_log_time", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" ]
#    }

} # of filter section
#--------------------------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------------------------
output {
    if "TRAFFIC" in [tags] {
        elasticsearch {
            index => ["pan-fwlog-traffic-%{+YYYY.MM.dd}"]
            hosts => ["127.0.0.1:9200"]
        }
#        stdout { codec => rubydebug }
} else if "GTP" in [tags] {
        elasticsearch {
            index => ["pan-fwlog-gtp-%{+YYYY.MM.dd}"]
            hosts => ["127.0.0.1:9200"]
        }
#        stdout { codec => rubydebug }
} else if "THREAT" in [tags] {
        elasticsearch {
            index => ["pan-fwlog-threat-%{+YYYY.MM.dd}"]
            hosts => ["127.0.0.1:9200"]
        }
#        stdout { codec => rubydebug }
} else {
        elasticsearch {
            index => ["pan-fwlog-lost-%{+YYYY.MM.dd}"]
            hosts => ["127.0.0.1:9200"]
        }
#        stdout { codec => rubydebug }
}
}
